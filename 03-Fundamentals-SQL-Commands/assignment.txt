1. List the commands for adding, updating, and deleting data.
***

  Adding data:   INSERT INTO statement
  Updating data: UPDATE command
  Deleting data: DELETE command

2. Explain the structure for each type of command.
***

  INSERT INTO will populate the table with the entered values.

    INSERT INTO (table the data is in) (column(s) want to add to)
    VALUES (data to add, separated by columns);

  UPDATE to change the data

    UPDATE (table)
    SET (column_name) = value
    WHERE (where the change will take place (row), ie. id = 5);

  DELETE to remove data

    DELETE FROM (table)
    WHERE (where the change will take place (row), ie. id = 5);

3. What are some the data types that can be used in tables? Give a real world example of each.
***

    CHAR - text data type that holds a fixed length sting that is specified by ().
          Can store up to 255 characters. For example, the movie title, "Star Trek Beyond".

    INT - number data type that holds values from 0 to 4294967295, with the max number
          specified in the ().  For example, duration column with a value of 70.

    DATE - a date data type with the format YYYY-MM-DD.  For example, the release_date column
            with a value of 2017-05-14.

4. Think through how to create a new table to hold a list of people invited to a wedding.
  This table needs to have first and last name, whether they sent in their RSVP,
  the number of guests they are bringing, and the number of meals (1 for adults and 1/2 for children).

  Which data type would you use to store each of the following pieces of information?

  a. First and last name

    varchar

  b. Whether they sent in their RSVP

    boolean

  c. Number of guests

    int

  d. Number of meals

    float

  * Write a command that makes the table to track the wedding.

    (createdb -U rpirritano -w registry) - if psql

    CREATE TABLE registry (
      LastName varchar(255) NOT NULL,
      FirstName varchar(255) NOT NULL,
      Rsvp boolean
      NumGuest int()
      NumMeals float()
    );

  * Using the table we just created, write a command that adds a column to track
    whether they were sent a thank you card.

    ALTER TABLE registry
    ADD thankyou_card boolean;

  * You have decided to move the data about the meals to another table,
    so write a command to remove the column storing the number of meals from the wedding table.

    ALTER TABLE registry
    DROP COLUMN NumMeals;

  * The guests are going to need a place to sit at the reception, so write a statement that adds a column
    for table number.

    ALTER TABLE registry
    ADD COLUMN table_num int;

  * The wedding is over and we do not need to keep this information, so write a command that deletes the wedding table
    from the database.

    DROP TABLE registry;


5. Write a command to make a new table to hold the books in a library with the columns
   ISBN, title, author, genre, publishing date, number of copies, and available copies.

   CREATE TABLE library (
     ISBN number(13),
     Title varchar(255),
     Author varchar(255),
     Genre varchar(255),
     PubDate date(),
     NumCopies number(4),
     AvailCopies number(4)
   );

  * Find three books and add their information to the table.

      INSERT INTO library(ISBN, Title, Genre)
      VALUES (1-84356-028-3, 'Madmen', 'Science Fiction');

      INSERT INTO library(ISBN, Title, Genre)
      VALUES (0-684-84328-5, 'Late into the night', 'Suspense');

      INSERT INTO library(ISBN, Title, Genre)
      VALUES (0-9752298-0-X, 'Building your first garden', 'Self-help');


  * Say that someone has just checked out one of the books.
    Change the available copies column to 1 less.

      UPDATE library
      SET AvailCopies = 3
      WHERE ISBN = 1-84356-028-3;

  * Now one of the books has been added to the banned books list. Remove it from the table.

      DELETE FROM library
      WHERE ISBN = 1-84356-028-3;


6. Write a command to make a new table to hold spacecrafts.
   Information should include id, name, year launched, country of origin, a brief description of the mission,
   orbiting body, if it is currently operating, and approximate miles from Earth.

   CREATE TABLE spacecrafts (
     ID int,
     Name varchar(255),
     YearLaunched year(),
     Country varchar(255),
     MissionDescription mediumtext(),
     OrbitingBody varchar(255),
     Operating boolean,
     MilesFromEarth double()
   );

   * Add 3 non-Earth-orbiting satellites to the table.

      INSERT INTO spacecrafts(ID, Name, OrbitingBody)
      VALUES (1, 'jules-465', 'Pluto');

      INSERT INTO spacecrafts(ID, Name, OrbitingBody)
      VALUES (2, 'luche-8974', 'Mars');

      INSERT INTO spacecrafts(ID, Name, OrbitingBody)
      VALUES (3, 'ash-916', 'Saturn');

    * Remove one of the satellites from the table since it has just been crashed into the planet.

        DELETE FROM spacecrafts
        WHERE ID = 3;

    * Edit another satellite because it is no longer operating and change the value to reflect that.

        UPDATE spacecrafts
        SET Operating = false
        WHERE ID = 5;


7. Write a command to make a new table to hold the emails in your inbox.
   This table should include an id, the subject line, the sender, any additional recipients, the body of the email,
   the timestamp, whether or not it’s been read, and the id of the email chain it’s in.


   CREATE TABLE emails (
     ID int,
     Subject varchar(255),
     Sender varchar(255),
     Recipients varchar(255),
     Body mediumtext(),
     Timestamp timestamp(),
     Read boolean,
     EmailChainId int
   );

  * Add 3 new emails to the inbox.

    INSERT INTO emails(ID, Subject, Sender, Body)
    VALUES (1, 'lunch', 'Matt Mendoza', 'When are you free for lunch?');

    INSERT INTO emails(ID, Subject, Sender, Body)
    VALUES (2, 'weekend plans', 'Raul Oropeza', 'Are you free for drinks on Sat?');

    INSERT INTO emails(ID, Subject, Sender, Body)
    VALUES (3, 'project status', 'Julian Martinez', 'Can I get an update on the user_profile feature?');

  * You’ve just deleted one of the emails, so write a command to remove the row from the inbox table.

    DELETE FROM emails
    WHERE ID = 3;

  * You’ve just sent an email to the wrong person. Using the handy undo feature from your email provider,
    you quickly correct this and send it to the correct recipient. Write a command to reflect this change
    in the database.

    UPDATE emails
    SET Recipients = 'Chris Nelson'
    WHERE ID = 5;
