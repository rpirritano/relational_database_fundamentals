1.  Explain a subquery in your own words.

    A subquery, also known as a nested query, is a query that is within
    another SQL query and is embedded within the WHERE clause.  The subquery
    can be used with the SELECT, INSERT, UPDATE, and DELETE statements.  A
    subquery is used to return data that will be used in the main query as a
    condition to further restrict the data to be retrieved.

2. Where can you use a subquery within a SELECT statement?

    A subquery can be used in a SELECT clause, a FROM clause, or a WHERE clause
    or inside another subquery.

3. When would you employ a subquery?

    You would use a subquery when you want to perform the following tasks:
         - Compare an expression to the result of the query
         - Determine if an expression is included in the results of a query
         - Check whether the query selects any rows

4. Explain a row constructor in your own words.

    A row constructor will define an ordered set of values that make up one row of data.

5. What happens if a row in the subquery result provides a NULL value to the comparison?

    Then no rows will be returned by the outer query


6. What are the ways to use a subquery within a WHERE clause?

    You can use a subquery within a WHERE clause with the following:
      - With a row constructor
      - EXISTS, IN, NOT IN, ALL, ANY, SOME, NOT EXISTS

7. Build an employees table and a shifts table with appropriate primary and foreign keys.
    Then, write queries to find the following information:
         * List all employees and all shifts.

            SELECT employees.last_name, s.shift_name
            FROM employees,
            (SELECT shift_name, employee_id FROM shift) AS s
            WHERE employees.employee_id = s.employee_id;

              last_name  |    shift_name
             ------------+------------------
              Washington | Early Shift
              Adams      | Late Shift
              Jefferson  | Mid-day Shift
              Madison    | All-day Shift
              Monroe     | Midnight Shift
              Martinez   | Clean-up
              Oropeza    | Lunch
              Nelson     | Dinner
              Nelson     | Snack
              Pickens    | Late Night Snack


          * Create a list of all possible schedules.


              SELECT employees.last_name, s.shift_name
              FROM employees,
              (SELECT shift_name, employee_id FROM shift) AS s;

              OR

              SELECT employees.last_name, shift.shift_name
              FROM employees, shift;


8.  Given a dogs table, adoptions table, adopters table, and volunteers table , write queries to retrieve the following information.
    All tables are described below.
        * Create a list of all volunteers. If the volunteer is fostering a dog, include each dog as well.


            SELECT name, (SELECT name FROM dogs WHERE dogs.foster_id = volunteers.foster_id) AS foster_dog
            FROM volunteers;

                   name      | foster_dog
             ----------------+------------
              Mary Moore     |
              Julie Adams    |
              Andrea Ruiz    |
              Andrea Lyman   |
              Brittany White | Lassie


        * List the adopter’s name and the pet’s name for each animal adopted within the past month
          to be displayed as a ‘Happy Tail’ on social media.


              SELECT adopters.first_name AS adopter, p.cat, p.dog, p.adoption_date
              FROM adopters,
              (SELECT adoption_id, cat, dog, adopter, adoption_date
                FROM adoptions
                WHERE adoption_date > (CURRENT_DATE - INTERVAL '30 days')) as p
                WHERE adopters.adoption_id = p.adoption_id;

                          adopter |   cat    | dog | adoption_date
                         ---------+----------+-----+---------------
                          Katie   | SeaShell |     | 2017-09-22


        * Create a list of adopters who have not yet chosen a dog to adopt and generate all possible combinations
          of adopters and available dogs.

             SELECT t.name AS volunteer, dogs.name AS dog
             FROM dogs,
             (SELECT name, adoption_id
              FROM volunteers
              WHERE adoption_id IS NOT NULL) as t;


                volunteer      |   dog
               ----------------+-----------
                Mary Moore     | Boujee
                Andrea Lyman   | Boujee
                Brittany White | Boujee
                Mary Moore     | Munchkin
                Andrea Lyman   | Munchkin
                Brittany White | Munchkin
                Mary Moore     | Marley
                Andrea Lyman   | Marley
                Brittany White | Marley
                Mary Moore     | Lassie
                Andrea Lyman   | Lassie
                Brittany White | Lassie
                Mary Moore     | Marmaduke
                Andrea Lyman   | Marmaduke
                Brittany White | Marmaduke
                Mary Moore     | Rosco
                Andrea Lyman   | Rosco
                Brittany White | Rosco


        * Display a list of all cats and all dogs who have not been adopted.

              SELECT cat, dog
              FROM adoptions
              WHERE adoption_date IS NULL;

              OR

              SELECT cat, dog
              FROM adoptions
              WHERE NOT EXISTS
              (SELECT adoption_date
                FROM adoptions);

                        cat     | dog
                       ---------+-----
                       Seashell |
                       Nale     |
                                | Boujee
                                | Rosco


        * Create a list of volunteers who are available to foster.
          If they currently are fostering a dog, include the dog.


              SELECT volunteers.name AS volunteer, dog.name
              FROM volunteers
              LEFT JOIN
              (SELECT name, foster_id
                FROM dogs) AS dog
              ON dog.foster_id = volunteers.foster_id
              WHERE available_to_foster = 't'
              ORDER BY volunteers.name;

                    volunteer    |  name
                 ----------------+--------
                  Andrea Lyman   |
                  Brittany White | Lassie
                  Mary Moore     |


9.  Write a query to find the name of the person who adopted Seashell
   given the tables cats, adoptions, and adopters.

            SELECT adopter, cat, adoption_date
            FROM adoptions
            WHERE cat = 'SeaShell';

                        adopter    |   cat    | adoption_date
                    ---------------+----------+---------------
                     Katie Michaud | SeaShell | 2017-09-22

          OR

              SELECT adopter
              FROM adoptions
              WHERE cat IN
              (SELECT name
                FROM cats
                WHERE name = 'Seashell');

                    adopter
                  ---------------
                  Katie Michaud


10. Given the tables books (isbn, title, author), transactions (id, checked_out_date, checked_in_date, user_id, isbn),
    holds (id, isbn, user_id, rank, date), and patrons (id, name, fine_amount),
    write queries to find the following information:

      * To discern if the library should buy more copies of a given book,
        please provide the names and position, in order, of all of the patrons
        waiting in line for Harry Potter and the Sorcerer’s Stone.

            SELECT patrons.name, waiting.rank
            FROM patrons,
            (SELECT user_id, rank
              FROM holds
              WHERE isbn = 1-65789-043-6
              GROUP BY user_id, rank) AS waiting
            WHERE patrons.id = waiting.user_id
            ORDER BY waiting.rank;

                      name        | rank
                ------------------+------
                 Anthony Nelson   |    1
                 Brandon Martinez |    2
                 Fiocco Fiore     |    3


      * Make a list of all book titles and denote whether or not a copy of that book is
        checked out.

            SELECT books.title, t.checked_in_date
            FROM books,
            (SELECT user_id, isbn, checked_in_date
              FROM transactions) AS t
            WHERE books.isbn = t.isbn;


                           title                   | checked_in_date
         ------------------------------------------+-----------------
          Designing Object-Oriented Software       |
          Practical Object-Oriented Design in Ruby |
          JavaScript: The Good Parts               |
          Eloquent Ruby                            | 2017-09-01
          Harry Potter and the Sorcerer Stone      | 2017-09-11



      * In an effort to learn which books take longer to read,
        the librarians would like you to create a list of total checked out time by book name
        in the past month.

            SELECT books.title, t.total_checked_out_time_in_days
            FROM books,
            (SELECT isbn, checked_in_date - checked_out_date AS total_checked_out_time_in_days
              FROM transactions
              WHERE transactions.checked_in_date < (CURRENT_DATE - INTERVAL '30 days')) AS t
            WHERE books.isbn = t.isbn;


                                     title                | total_checked_out_time_in_days
                      ------------------------------------+--------------------------------
                       Eloquent Ruby                      |                            243
                       JavaScript: The Good Parts         |                             58
                       Designing Object-Oriented Software |                             58


         * In order to learn which items should be retired, make a list of all books that have not
           been checked out in the past 5 years.

                SELECT books.title, t.checked_in_date
                FROM books,
                (SELECT isbn, checked_in_date
                  FROM transactions
                  WHERE transactions.checked_in_date < (CURRENT_DATE - INTERVAL '5 years')) AS t
                WHERE books.isbn = t.isbn;


                                     title                | checked_in_date
                      ------------------------------------+-----------------
                       JavaScript: The Good Parts         | 2010-04-04
                       Designing Object-Oriented Software | 2009-04-04


         * List all of the library patrons. If they have one or more books checked out,
           correspond the books to the patrons.

              SELECT patrons.name, b.title, t.isbn
              FROM patrons,
              (SELECT user_id, isbn, checked_in_date
              FROM transactions) AS t,
              (SELECT title, isbn
              FROM books) as b
              WHERE patrons.id = t.user_id
              AND b.isbn = t.isbn;


                          name      |   isbn   |                  title
                    ----------------+----------+------------------------------------------
                     Fiocco Fiore   |   -85017 | JavaScript: The Good Parts
                     Fiocco Fiore   |   -84386 | Eloquent Ruby
                     Anthony Nelson |   -65837 | Harry Potter and the Sorcerer Stone
                     Nina Gibson    | -9752301 | Designing Object-Oriented Software
                     Nina Gibson    |   -85135 | Practical Object-Oriented Design in Ruby


11. Given the following tables in an airliner database, find the following information.
      airplanes (model, seat capacity, range),
      flights(flight_number, destination, origin, company, distance, flight_time, airplane_model),
      transactions(id, seats_sold, total_revenue, total_cost, flight_number, date)


      * To determine the most profitable airplanes, find all airplane models where each flight has had
        over 100 paying customers in the past month.

                SELECT DISTINCT flights.model
                FROM flights
                WHERE flights.flight_number IN
                (SELECT flight_number
                  FROM transactions
                  WHERE seats_sold > 100
                  AND date < (CURRENT_DATE - INTERVAL '30 days'));


                        model
                       -------
                       747
                       787


      *  To determine the most profitable flights, find all destination-origin pairs
          where 90% or more of the seats have been sold in the past month.


            SELECT transactions.flight_number
            FROM transactions,
            (SELECT airplanes.model, airplanes.seat_capacity, flights.flight_number
              FROM airplanes, flights
              WHERE airplanes.model = flights.model
              GROUP BY airplanes.model, airplanes.seat_capacity, flights.flight_number
              HAVING COUNT(destination) > 1 AND COUNT(origin) > 1) d
            WHERE transactions.flight_number = d.flight_number
            AND (transactions.seats_sold / d.seat_capacity) > .90;


                      flight_number
                     ---------------
                      2476
                      3784

      * The airline is looking to expand its presence in the US Southeast and globally.
        Find the total revenue of any flight arriving at or departing from Atlanta.

              SELECT transactions.flight_number, SUM(transactions.total_revenue)
              FROM transactions,
              (SELECT flight_number, origin, destination
                FROM flights
                WHERE origin = 'Atlanta' OR destination = 'Atlanta') as f
              WHERE transactions.flight_number = f.flight_number
              GROUP BY transactions.flight_number;


                flight_number |  sum
               ---------------+-------
                         2476 | 84500
                         3784 | 45000
                         4537 | 81000


12. Compare the subqueries you've written above. Compare them to the joins you wrote in Checkpoint 6.
    Which ones are more readable? Which were more logical to write?

              In the cases above, the subqueries that had less conditions seem to be easier to read than the
              corresponding join from checkpoint 6.  In these cases, it was easier to see what the outer query was going to
              use from the inner query to pull the data.  For the more complex queries the joins were easier to write
              and were more readable.  I feel that it can be a personal preference of which to use, however; it may be
              more logical to use a subquery for instances that the data from the subquery will make the full query quicker
              to run.
