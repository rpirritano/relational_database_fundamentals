1. Create a database for the model we built in the example. Create a SQL file that creates the tables and
   inserts sample data. Write queries that demonstrate the following scenarios:

        A. Find a guest who exists in the database and has not booked a room.

            SELECT guests.first_name, guests.last_name
            FROM guests
            LEFT OUTER JOIN bookings ON guests.guest_id = bookings.guest_id
            WHERE bookings.guest_id IS NULL
            LIMIT 1;

                first_name | last_name
               ------------+-----------
                 Tania     | Nelson


        B. Find bookings for a guest who has booked two rooms for the same dates.

            *** Note** I added more to the table, per our conversation to confirm***


            SELECT g.first_name, g.last_name, b.checked_in_date, b.checked_out_date, COUNT(b.guest_id)
            FROM bookings AS b
            INNER JOIN guests AS g ON g.guest_id = b.guest_id
            GROUP BY g.first_name, g.last_name, b.checked_in_date, b.checked_out_date
            HAVING COUNT(b.checked_in_date) = 2 AND COUNT(b.checked_out_date) = 2
            LIMIT 1;

              first_name | last_name  | checked_in_date | checked_out_date | count
             ------------+------------+-----------------+------------------+-------
              George     | Washington | 2017-01-01      | 2017-01-05       |     2



        C. Find bookings for a guest who has booked one room several times on different dates.

            SELECT guest_id, room_number, COUNT(room_number) AS times_booked
            FROM bookings
            GROUP BY guest_id, room_number
            HAVING COUNT(room_number) > 1
            LIMIT 1;

                guest_id | room_number | times_booked
               ----------+-------------+--------------
                       4 |        4119 |            2



        D. Count the number of unique guests who have booked the same room.

              SELECT room_number, COUNT(DISTINCT guest_id)
              FROM bookings
              GROUP BY room_number;


                  room_number | count
                 -------------+-------
                         1110 |     1
                         1111 |     1
                         2015 |     1
                         2019 |     1
                         3108 |     1
                         3120 |     3
                         4103 |     1
                         4105 |     1
                         4114 |     2
                         4118 |     1
                         4119 |     1


2.  Design a data model for students and the classes they have taken.
    The model should include the students' grades for a given class.
        * Work through the questions from the example above.
        * Document any assumptions you make about what data should be stored,
          what data types should be used, etc., and include them in a text file.


       * What classes/entites do we need to model?

                I will need to store student and class information, as well as grades for each class
                  - Therefore, I will need:
                                    1. student entity
                                    2. class entity
                                    3. gradebook entity

        * What fields/attributes will each entity need?

              Attributes:
                  student entity - student id, first name, last name, phone number, email, address
                  class entity - course id, course name, start date, end date
                  gradebook entity - student id, class id, grade

        * What data types do we need to use?

              varchar for text attributes, such as the names, phone-numbers, addresses
              int - for the id's
              date - for the start/end dates

        * What relationships exist between entities?

            The student and class entity will have a One-to-Many since only one student can be associated with
            a class.  However, any one student can have many classes.
            There will also be a One-to_many relationship with the student to the gradebook.  There will be a
            One-to-One relationship between the class and the gradebook since each gradebook will only be
            associated with one class.


         * Draw the model using the notation used in the checkpoint and submit a picture.
                  Link to schema: https://app.quickdatabasediagrams.com/#/schema/DZ2NpppsC0ylBZFEMpKrtQ


3. Build a database for the students/classes data model.
  Create a SQL file that creates the tables and inserts sample data
  (the questions below will help you create the data).
  Write queries that demonstrate the following scenarios:

* Find all students who have taken a particular class.

        SELECT student_id, course_id
        FROM gradebooks
        WHERE course_id = 'RY101';


          student_id | course_id
         ------------+-----------
                   1 | RY101
                   2 | RY101
                   3 | RY101
                   4 | RY101
                   5 | RY101
                   6 | RY101


* Count the number of each grade (using letter grades A-F) earned in a particular class.

          SELECT course_id, grade, COUNT(grade)
          FROM gradebooks
          GROUP BY course_id, grade
          HAVING course_id = 'RY101';


            course_id | grade | count
           -----------+-------+-------
            RY101     | A     |     2
            RY101     | B     |     3
            RY101     | C     |     1


* Find class names and the total number of students who have taken each class in the list.


        SELECT course_id, COUNT(student_id) AS TotalStudents
        FROM gradebooks
        GROUP BY course_id
        ORDER BY course_id ASC;


          course_id | totalstudents
         -----------+---------------
          CS100     |            10
          JS101     |             4
          JS102     |             4
          RY101     |             6
          RY102     |             6


* Find the class taken by the largest number of students.

      SELECT course_id, COUNT(student_id) AS total_students
      FROM gradebooks
      GROUP BY course_id
      ORDER BY total_students DESC
      LIMIT 1;


        course_id | total_students
       -----------+----------------
        CS100     |             10
