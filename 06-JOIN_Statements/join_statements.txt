1. How do you find data that is held in two separate data tables?

    A JOIN clause can be used to find the data by combining two or more
    tables, based on a related column

2. Explain, in your own words, the difference between a CROSS JOIN, INNER JOIN,
   LEFT OUTER JOIN, RIGHT OUTER JOIN, and FULL OUTER JOIN. Give a real world example for each.

    * For the real examples, I will use a store database with a customers table and a Orders table

CUSTOMERS (Table A or the left table)
+-----------+------------+------------+---------------------+---------------------------+-----------------+-------+-------+
customer_id | first_name | last_name  |        email        |          address          |      city       | state |  zip
+-----------+------------+------------+---------------------+---------------------------+-----------------+-------+-------+
          1 | George     | Washington | gwashington@usa.gov | 3200 Mt Vernon Hwy        | Mount Vernon    | VA    | 22121
          2 | John       | Adams      | jadams@usa.gov      | 1250 Hancock St           | Quincy          | MA    |  2169
          3 | Thomas     | Jefferson  | tjefferson@usa.gov  | 931 Thomas Jefferson Pkwy | Charlottesville | VA    | 22902
          4 | James      | Madison    | jmadison@usa.gov    | 11350 Constitution Hwy    | Orange          | VA    | 22960
          5 | James      | Monroe     | jmonroe@usa.gov     | 2050 James Monroe Parkway | Charlottesville | VA    | 22902
+-----------+------------+------------+---------------------+---------------------------+-----------------+-------+-------+

ORDERS (Table B or the right table)
+--------+------------+--------+-------------+
order_id | order_date | amount | customer_id
+--------+------------+--------+-------------+
       1 | 1776-07-04 | 234.56 |           1
       2 | 1760-03-14 |  78.50 |           3
       3 | 1784-05-23 | 124.00 |           2
       4 | 1790-09-03 |  65.50 |           3
       5 | 1795-07-21 |  25.50 |          10
       6 | 1787-11-27 |  14.40 |           5
+--------+------------+--------+-------------+

    CROSS JOIN - The CROSS JOIN will return every combination of rows from two tables.  This results is also
                referred to a Cartesian product, where the size of the result set is the number of rows
                in the first table multiplied by the number of rows in the second table.

                For the above example:
                  SELECT *
                  FROM customers
                  CROSS JOIN orders;

    RESULTS:

customer_id | first_name | last_name  |        email        |          address          |      city       | state |  zip  | order_id | order_date | amount | customer_id
------------+------------+------------+---------------------+---------------------------+-----------------+-------+-------+----------+------------+--------+-------------
          1 | George     | Washington | gwashington@usa.gov | 3200 Mt Vernon Hwy        | Mount Vernon    | VA    | 22121 |        1 | 1776-07-04 | 234.56 |           1
          2 | John       | Adams      | jadams@usa.gov      | 1250 Hancock St           | Quincy          | MA    |  2169 |        1 | 1776-07-04 | 234.56 |           1
          3 | Thomas     | Jefferson  | tjefferson@usa.gov  | 931 Thomas Jefferson Pkwy | Charlottesville | VA    | 22902 |        1 | 1776-07-04 | 234.56 |           1
          4 | James      | Madison    | jmadison@usa.gov    | 11350 Constitution Hwy    | Orange          | VA    | 22960 |        1 | 1776-07-04 | 234.56 |           1
          5 | James      | Monroe     | jmonroe@usa.gov     | 2050 James Monroe Parkway | Charlottesville | VA    | 22902 |        1 | 1776-07-04 | 234.56 |           1
          1 | George     | Washington | gwashington@usa.gov | 3200 Mt Vernon Hwy        | Mount Vernon    | VA    | 22121 |        2 | 1760-03-14 |  78.50 |           3
          2 | John       | Adams      | jadams@usa.gov      | 1250 Hancock St           | Quincy          | MA    |  2169 |        2 | 1760-03-14 |  78.50 |           3
          3 | Thomas     | Jefferson  | tjefferson@usa.gov  | 931 Thomas Jefferson Pkwy | Charlottesville | VA    | 22902 |        2 | 1760-03-14 |  78.50 |           3
          4 | James      | Madison    | jmadison@usa.gov    | 11350 Constitution Hwy    | Orange          | VA    | 22960 |        2 | 1760-03-14 |  78.50 |           3
          5 | James      | Monroe     | jmonroe@usa.gov     | 2050 James Monroe Parkway | Charlottesville | VA    | 22902 |        2 | 1760-03-14 |  78.50 |           3
          1 | George     | Washington | gwashington@usa.gov | 3200 Mt Vernon Hwy        | Mount Vernon    | VA    | 22121 |        3 | 1784-05-23 | 124.00 |           2
          2 | John       | Adams      | jadams@usa.gov      | 1250 Hancock St           | Quincy          | MA    |  2169 |        3 | 1784-05-23 | 124.00 |           2
          3 | Thomas     | Jefferson  | tjefferson@usa.gov  | 931 Thomas Jefferson Pkwy | Charlottesville | VA    | 22902 |        3 | 1784-05-23 | 124.00 |           2
          4 | James      | Madison    | jmadison@usa.gov    | 11350 Constitution Hwy    | Orange          | VA    | 22960 |        3 | 1784-05-23 | 124.00 |           2
          5 | James      | Monroe     | jmonroe@usa.gov     | 2050 James Monroe Parkway | Charlottesville | VA    | 22902 |        3 | 1784-05-23 | 124.00 |           2
          1 | George     | Washington | gwashington@usa.gov | 3200 Mt Vernon Hwy        | Mount Vernon    | VA    | 22121 |        4 | 1790-09-03 |  65.50 |           3
          2 | John       | Adams      | jadams@usa.gov      | 1250 Hancock St           | Quincy          | MA    |  2169 |        4 | 1790-09-03 |  65.50 |           3
          3 | Thomas     | Jefferson  | tjefferson@usa.gov  | 931 Thomas Jefferson Pkwy | Charlottesville | VA    | 22902 |        4 | 1790-09-03 |  65.50 |           3
          4 | James      | Madison    | jmadison@usa.gov    | 11350 Constitution Hwy    | Orange          | VA    | 22960 |        4 | 1790-09-03 |  65.50 |           3
          5 | James      | Monroe     | jmonroe@usa.gov     | 2050 James Monroe Parkway | Charlottesville | VA    | 22902 |        4 | 1790-09-03 |  65.50 |           3
          1 | George     | Washington | gwashington@usa.gov | 3200 Mt Vernon Hwy        | Mount Vernon    | VA    | 22121 |        5 | 1795-07-21 |  25.50 |          10
          2 | John       | Adams      | jadams@usa.gov      | 1250 Hancock St           | Quincy          | MA    |  2169 |        5 | 1795-07-21 |  25.50 |          10
          3 | Thomas     | Jefferson  | tjefferson@usa.gov  | 931 Thomas Jefferson Pkwy | Charlottesville | VA    | 22902 |        5 | 1795-07-21 |  25.50 |          10
          4 | James      | Madison    | jmadison@usa.gov    | 11350 Constitution Hwy    | Orange          | VA    | 22960 |        5 | 1795-07-21 |  25.50 |          10


      INNER JOIN - The INNER JOIN will select records that have matching values in both tables.
                   The INNER JOIN will select all rows from both tables as long as there is a match
                   between the columns.  For example, if there are records in the Orders table that do not have a
                   match in the customers table, then those orders will not be shown.  This is the most
                   frequent used join and is also referred to as an EQUIJOIN.

                      For example, I want to list all the customer's last name and state with the order date from
                      the orders table.

                        SELECT customers.last_name, customers.state, orders.order_date
                        FROM customers
                        INNER JOIN orders ON orders.customer_id = customers.customer_id;

                        RESULTS:

                          last_name  | state | order_date
                         ------------+-------+------------
                          Washington | VA    | 1776-07-04
                          Jefferson  | VA    | 1760-03-14
                          Adams      | MA    | 1784-05-23
                          Jefferson  | VA    | 1790-09-03
                          Monroe     | VA    | 1787-11-27


      LEFT OUTER JOIN -  LEFT OUTER JOIN, known as LEFT JOIN in some databases, will return all records
                         from the first table, regardless of whether the matching row on the second
                         table.  If there is no match, then the result is NULL from the
                         right table.

                         For example: The following statement will select all customers and any order ids that they might have.
                         Since Madison does not have an order id in the orders table, it returns as null.


                         SELECT customers.last_name, orders.order_id
                         FROM customers
                         LEFT OUTER JOIN orders ON customers.customer_id = orders.customer_id
                         ORDER BY customers.last_name;


                          RESULTS:
                            last_name  | order_id
                           ------------+----------
                            Adams      |        3
                            Jefferson  |        2
                            Jefferson  |        4
                            Madison    |
                            Monroe     |        6
                            Washington |        1


        RIGHT OUTER JOIN - RIGHT OUTER JOIN, known as RIGHT JOIN in some databases, will return all records
                           from the second table, regardless of whether the matching row on the first
                           table.  If there is no match, then the result is NULL from the
                           left table.

                           For example, I want to list all the names of the customers, even if there is not an order
                           id associated.

                           SELECT orders.order_id, customers.first_name, customers.last_name
                           FROM orders
                           RIGHT OUTER JOIN customers ON orders.customer_id = customers.customer_id
                           ORDER BY orders.order_id;

                           RESULTS:

                           order_id | first_name | last_name
                          ----------+------------+------------
                                  1 | George     | Washington
                                  2 | Thomas     | Jefferson
                                  3 | John       | Adams
                                  4 | Thomas     | Jefferson
                                  6 | James      | Monroe
                                    | James      | Madison


            FULL OUTER JOIN - The FULL OUTER JOIN will return all records when there is a match in either
                              the left or right table.

                              SELECT customers.first_name, customers.last_name, orders.order_id
                              FROM customers
                              FULL OUTER JOIN orders ON customers.customer_id = orders.customer_id

                              RESULTS:

                              first_name | last_name  | order_id
                             ------------+------------+----------
                              George     | Washington |        1
                              Thomas     | Jefferson  |        2
                              John       | Adams      |        3
                              Thomas     | Jefferson  |        4
                                         |            |        5
                              James      | Monroe     |        6
                              James      | Madison    |


3. Define primary key and foreign key. Give a real world example for each.

    The primary key is the field in a database that will uniquely identify each
    row in a table.  Each primary key must be a unique values and cannot be a
    null value.  Therefore, each record in a table can only have one primary key.

    The foreign key is used to link two tables together and can be referred to as a
    referencing key.  This relationship between two tables is created by having the
    primary key of one table matching the foreign key in the other table.  A foreign
    key does not have to be a unique value and also can be null.

    For the example, I will continue to use the customers and orders table that
    I used above.

    For these tables, the customer_id is the primary key in the customers table and is the
    foreign key in the orders table.  Each customer has a unique key to identify the customer, so
    no two customers can have the same primary key in the customers table.  In the orders table,
    since each customer can have more than one order_id, the foreign keys will connect the orders
    table to the customers table.

4. Define aliasing.

    Aliasing is the technique of creating short variable names to replace the name
    of a table or column to increase readability.  The alias is usually one letter.
    For example, c can be used for the customers table and is defined in the query such as:

      SELECT o.order_id
      FROM orders AS o;

5. Change this query so that you are using aliasing:

    SELECT professor.name, compensation.salary, compensation.vacation_days
    FROM professor
    JOIN compensation ON professor.id = compensation.professor_id;


      SELECT professor.name AS prof_name, compensation.salary AS comp_salary, compensation.vacation_days AS comp_vac_days
      FROM professor AS p
      JOIN compensation AS c ON p.id = c.professor_id;

6. Why would you use a NATURAL JOIN? Give a real world example.

    A natural join will compare all columns in both tables that will have the same
    column names in the joined tables and will return only one column for each
    pair of the columns with the same name.  In other words, a Natural Join will result
    with columns with the same name of the associated tables to only appear once.

    For example, for my above tables, both tables will have the same column name,
    customer_id.  A NATURAL JOIN will produce the following:

    SELECT *
    FROM customers
    NATURAL JOIN orders;



    customer_id | first_name | last_name  |        email        |          address          |      city       | state |  zip  | order_id | order_date | amount
   -------------+------------+------------+---------------------+---------------------------+-----------------+-------+-------+----------+------------+--------
              1 | George     | Washington | gwashington@usa.gov | 3200 Mt Vernon Hwy        | Mount Vernon    | VA    | 22121 |        1 | 1776-07-04 | 234.56
              3 | Thomas     | Jefferson  | tjefferson@usa.gov  | 931 Thomas Jefferson Pkwy | Charlottesville | VA    | 22902 |        2 | 1760-03-14 |  78.50
              2 | John       | Adams      | jadams@usa.gov      | 1250 Hancock St           | Quincy          | MA    |  2169 |        3 | 1784-05-23 | 124.00
              3 | Thomas     | Jefferson  | tjefferson@usa.gov  | 931 Thomas Jefferson Pkwy | Charlottesville | VA    | 22902 |        4 | 1790-09-03 |  65.50
              5 | James      | Monroe     | jmonroe@usa.gov     | 2050 James Monroe Parkway | Charlottesville | VA    | 22902 |        6 | 1787-11-27 |  14.40


7. Build an Employees table and a Shifts table with appropriate primary and foreign keys.

Employees Table

 employee_id | last_name  | first_name | birthdate  |           title            |          address          | gender | hire_date
-------------+------------+------------+------------+----------------------------+---------------------------+--------+------------
           1 | Washington | George     | 1820-02-10 | President                  | 3200 Mt Vernon Hwy        | M      | 1840-10-10
           2 | Adams      | John       | 1809-09-21 | Vice President             | 1250 Hancock St           | M      | 1829-12-21
           3 | Jefferson  | Thomas     | 1901-05-09 | Treasurer                  | 931 Thomas Jefferson Pkwy | M      | 1929-09-09
           4 | Madison    | James      | 1834-03-14 | Secretary                  | 11350 Constitution Hwy    | M      | 1854-03-14
           5 | Monroe     | James      | 1822-06-23 | Planner                    | 2050 James Monroe Parkway | M      | 1842-06-22
           6 | Martinez   | Julian     | 1970-11-21 | Regional Manager           | 747 Natoma Street         | M      | 1990-11-21
           7 | Oropeza    | Raul       | 1979-08-13 | Head Chief                 | 440 Polk Street           | M      | 1999-09-13
           8 | Nelson     | Tania      | 1984-04-02 | Events Coordinator         | 2039 W. Ontario Ave       | F      | 2004-04-02
           9 | Nelson     | Robbie     | 1982-07-20 | Electrical Supervisor      | 2039 W. Ontario Ave       | M      | 2002-07-20
          10 | Pickens    | Scott      | 1965-09-07 | Human Resources Supervisor | 246 Gonzalez Drive        | M      | 1985-09-07


Shift Table

 shift_id | employee_id |    shift_name    |     start_time      |      end_time       |    modified_date
----------+-------------+------------------+---------------------+---------------------+---------------------
      100 |           1 | Early Shift      | 2011-12-04 00:30:00 | 2011-12-04 20:30:00 | 2011-02-05 03:53:04
      102 |           2 | Late Shift       | 2011-01-02 00:20:00 | 2011-11-05 03:53:04 | 2011-04-05 03:53:04
      103 |           3 | Mid-day Shift    | 2011-02-04 01:20:00 | 2011-04-05 03:53:04 | 2011-08-05 03:53:04
      104 |           4 | All-day Shift    | 2011-03-06 00:15:00 | 2011-09-05 03:53:04 | 2011-07-05 03:53:04
      105 |           5 | Midnight Shift   | 2011-04-14 00:35:00 | 2011-03-05 03:53:04 | 2011-11-05 03:53:04
      106 |           6 | Clean-up         | 2011-05-24 00:45:00 | 2011-07-05 03:53:04 | 2011-12-05 03:53:04
      107 |           7 | Lunch            | 2011-06-04 00:30:00 | 2011-08-05 03:53:04 | 2011-11-05 03:53:04
      108 |           8 | Dinner           | 2011-07-08 00:30:00 | 2011-09-05 03:53:04 | 2011-06-05 03:53:04
      109 |           9 | Snack            | 2011-08-08 00:20:00 | 2011-10-05 03:53:04 | 2011-05-05 03:53:04
     1010 |          10 | Late Night Snack | 2011-09-04 00:15:00 | 2011-11-05 03:53:04 | 2011-04-05 03:53:04


Then, write queries to find the following information:
       - List all employees and all shifts.

       SELECT employees.first_name, employees.last_name, shift.shift_name
       FROM employees, shift
       WHERE employees.employee_id = shift.employee_id;

        first_name | last_name  |    shift_name
       ------------+------------+------------------
        George     | Washington | Early Shift
        John       | Adams      | Late Shift
        Thomas     | Jefferson  | Mid-day Shift
        James      | Madison    | All-day Shift
        James      | Monroe     | Midnight Shift
        Julian     | Martinez   | Clean-up
        Raul       | Oropeza    | Lunch
        Tania      | Nelson     | Dinner
        Robbie     | Nelson     | Snack
        Scott      | Pickens    | Late Night Snack


       - Create a list of all possible schedules.

          SELECT employees.employee_id, shift.shift_name
          FROM employees
          CROSS JOIN shift;


8. Given the Dogs table (described below), the Adoptions table, the Adopters table
  (which has the columns first_name, last_name, address, and phone number),
  and the Volunteers table (which has the columns id, name, address, phone_number,
  available_to_foster, and foster_id), please write queries to retrieve the following information.

      A. Create a list of all volunteers. If the volunteer is fostering a dog, include each dog as well.


            SELECT volunteers.name AS Volunteer, dogs.name AS Dog
            FROM volunteers
            LEFT OUTER JOIN dogs ON volunteers.foster_id = dogs.foster_id
            ORDER BY volunteers.name;


                volunteer    |    dog
             ----------------+-----------
              Andrea Lyman   | Marmaduke
              Andrea Ruiz    |
              Brittany White | Marley
              Julie Adams    |
              Mary Moore     | Munchkin


      B.  List the adopter’s name and the pet’s name for each animal adopted within the past month
          to be displayed as a ‘Happy Tail’ on social media.

              SELECT adopters.first_name AS owner, adoptions.name AS pet, adoptions.adoption_date
              FROM adopters
              INNER JOIN adoptions ON adoptions.adoption_id = adopters.adoption_id
              WHERE adoption_date > (CURRENT_DATE - INTERVAL '30 days');

                    owner   |    pet    | adoption_date
                 -----------+-----------+---------------
                  Katie     | Mushi     | 2017-09-22
                  Raul      | Victoire  | 2017-09-01
                  Alexander | Munchkin  | 2017-08-29
                  Sachin    | Marmaduke | 2017-09-15


        C. Create a list of adopters who have not yet chosen a dog to adopt and generate
            all possible combinations of adopters and available dogs.

              SELECT adopters.first_name, adopters.last_name, adoptions.name as pet
              FROM adopters
              CROSS JOIN adoptions
              WHERE adopters.adoption_id IS NULL AND adoption_date IS NULL;

                  first_name | last_name |   pet
                 ------------+-----------+----------
                  Alexander  | Mendoza   | Seashell
                  Alexander  | Mendoza   | Nale
                  Alexander  | Mendoza   | Boujee
                  Alexander  | Mendoza   | Rosco
                  Andrea     | Ruiz      | Seashell
                  Andrea     | Ruiz      | Nale
                  Andrea     | Ruiz      | Boujee
                  Andrea     | Ruiz      | Rosco


        D. Display a list of all cats and all dogs who have not been adopted.

                  SELECT name
                  FROM adoptions
                  WHERE adoption_date IS NULL;

                  name
                  ----------
                  Seashell
                  Nale
                  Boujee
                  Rosco

        E. Create a list of volunteers who are available to foster. If they currently are fostering a dog,
            include the dog.

                SELECT volunteers.name AS available_volunteers, dogs.name AS foster_dog
                FROM volunteers
                LEFT OUTER JOIN dogs ON volunteers.foster_id = dogs.foster_id
                WHERE available_to_foster = 't';

                    available_volunteers | foster_dog
                   ----------------------+------------
                    Mary Moore           | Munchkin
                    Andrea Lyman         | Marley
                    Brittany White       |

9. Write a query to find the name of the person who adopted Seashell given the tables Adoptions, Adopters

      SELECT adopters.first_name AS adopter, adoptions.name AS pet
      FROM adoptions
      INNER JOIN adopters ON adopters.adoption_id = adoptions.adoption_id
      WHERE adoptions.name = 'Seashell';


            adopter |   pet
           ---------+----------
            Chris   | Seashell



10.  Given the tables Books (isbn, title, author), Transactions(id, checked_out_date, checked_in_date, user_id, isbn),
      Holds(id, isbn, user_id, rank, date), and Patrons(id, name, fine_amount),
      write queries to find the following information:

      A. To discern if the library should buy more copies of a given book,
          please provide the names and position, in order, of all of the patrons waiting
          in line for Harry Potter and the Sorcerer’s Stone.

          SELECT name, rank
          FROM holds
          INNER JOIN patrons ON patrons.id = holds.user_id
          INNER JOIN books ON books.isbn = holds.isbn
          WHERE books.title = 'Harry Potter and the Sorcerer Stone'
          ORDER BY rank;

                 name       | rank
          ------------------+------
           Anthony Nelson   |    1
           Brandon Martinez |    2
           Fiocco Fiore     |    3



      B. Make a list of all book titles and denote whether or not a copy of that book is checked out.

          SELECT title, checked_in_date
          FROM books
          INNER JOIN transactions ON transactions.isbn = books.isbn;

                              title                   | checked_in_date
            ------------------------------------------+-----------------
             Designing Object-Oriented Software       | 2017-06-07
             Practical Object-Oriented Design in Ruby |
             JavaScript: The Good Parts               | 2017-04-04
             Eloquent Ruby                            | 2017-09-01
             Harry Potter and the Sorcerer Stone      | 2017-09-11



      C. In an effort to learn which books take longer to read, the librarians would like you to
         create a list of total checked out time by book name in the past month.

         SELECT
           books.title, checked_in_date -checked_out_date AS total_checked_out_time_in_days
         FROM transactions
         INNER JOIN books ON books.isbn = transactions.isbn
         WHERE transactions.checked_in_date < (CURRENT_DATE - INTERVAL '30 days');

                   title                | total_checked_out_time_in_days
    ------------------------------------+--------------------------------
     JavaScript: The Good Parts         |                             58
     Designing Object-Oriented Software |                             44



      D. In order to learn which items should be retired, make a list of all books that have not been
         checked out in the past 5 years.

         SELECT books.title, transactions.checked_in_date, transactions.isbn
         FROM transactions
         INNER JOIN books ON books.isbn = transactions.isbn
         WHERE transactions.checked_in_date < (CURRENT_DATE - INTERVAL '5 years');

                      title                | checked_in_date |   isbn
       ------------------------------------+-----------------+----------
        JavaScript: The Good Parts         | 2010-04-04      |   -85017
        Designing Object-Oriented Software | 2009-04-04      | -9752301



      E. List all of the library patrons. If they have one or more books checked out,
         correspond the books to the patrons.

         SELECT patrons.name, transactions.isbn, books.title
         FROM patrons
         INNER JOIN transactions ON transactions.user_id = patrons.id
         INNER JOIN books ON books.isbn = transactions.isbn;


            name       |   isbn   |                  title
     ------------------+----------+------------------------------------------
      Fiocco Fiore     |   -85017 | JavaScript: The Good Parts
      Fiocco Fiore     |   -84386 | Eloquent Ruby
      Brandon Martinez | -9752301 | Designing Object-Oriented Software
      Anthony Nelson   |   -65837 | Harry Potter and the Sorcerer Stone
      Nina Gibson      |   -85135 | Practical Object-Oriented Design in Ruby
